{
  "exerciseSheet": true,
  "blocks": [
    {
      "type": "text",
      "text": "# Tutorial: Getting used to Waterproof\n\nThis tutorial explains how to get started with Waterproof. The aim of Waterproof is to help learning how to prove mathematical statements.\n\nThis tutorial is in the form of an **exercise sheet** (sometimes we will call it a **notebook**). It is a mix of explanations and exercises in which you can try proving mathematical statements yourself. \n\nThe exercise sheet contains **text cells** (white background) and **code cells** (gray background). So far, we have been writing text, in text cells. But now we will introduce the first code cell.\n"
    },
    {
      "type": "code",
      "text": "Require Import Reals.\n\nRequire Import Waterproof.AllTactics.\nRequire Import Waterproof.contradiction_tactics.basic_contradiction.\nRequire Import Waterproof.notations.notations.\nRequire Import Waterproof.load_database.RealsAndIntegers."
    },
    {
      "type": "text",
      "text": "The code consists of five sentences. Every sentence finishes with a period. In these four sentences, libraries are imported that are necessary to make the rest of the notebook work."
    },
    {
      "type": "text",
      "text": "\nWe recommend that while you read this notebook, you execute the code sentence-by-sentence by pressing **Alt + ↓**. (Alternatively, you can use the buttons on the left, but it is typically much faster to work with keyboard shortcuts.)"
    },
    {
      "type": "text",
      "text": "## A first example of a lemma\n\nIn the following code cell, we introduce a **lemma**. We called the lemma **example_reflexivity**."
    },
    {
      "type": "code",
      "text": "Lemma example_reflexivity :\n  0 = 0."
    },
    {
      "type": "text",
      "text": "\nWe will now prove the lemma. We start the proof by writing the sentence `\"Proof.\"` in a code cell."
    },
    {
      "type": "code",
      "text": "\nProof."
    },
    {
      "type": "text",
      "text": "\nExecute the code sentence after sentence (press **Alt + ↓**), until a blue checkmark appears in place of the period after `Proof.`. The checkmark means that Waterproof has checked every sentence before the checkmark. Note how in the part of the screen under **Proof progress** (either on the right of the screen, or down below) appeared what we need to show, namely `(0=0)`. We will often refer to this as the current **goal**."
    },
    {
      "type": "text",
      "text": "\nNext, we tell Waterproof what to do to prove the lemma. For such a simple statement, we can just write and execute the sentence `\"We conclude that (0=0).\"` and Waterproof will check automatically that this holds. We will often refer to executing such a sentence as **applying a tactic.**"
    },
    {
      "type": "code",
      "text": "\nWe conclude that (0 = 0)."
    },
    {
      "type": "text",
      "text": "\nExecute the above sentence, with **Alt + ↓**, until the checkmark appears after the sentence. Note how under proof progress it says `Done.`. The lemma is proved! We close the proof by writing `Qed.`."
    },
    {
      "type": "code",
      "text": "\nQed."
    },
    {
      "type": "text",
      "text": "\n**HINT:** When writing `We conclude that (...)`, it is important that at the place of the dots you write the current goal (which you can see under **Proof progress**), and not another statement.\n\n**HINT:** If you click on the hammer symbol on the top right, a list of tactics will open. You can click on any of the tactics, and the tactic will be inserted in the text, usually with some placeholders that you need to fill in."
    },
    {
      "type": "text",
      "text": "## Try it yourself\n\nYou can now try this for yourself. We prepared a lemma below, that we named **exercise_reflexivity**."
    },
    {
      "type": "code",
      "text": "Lemma exercise_reflexivity :\n  3 = 3.\nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-1"
    },
    {
      "type": "text",
      "text": "The blue brackets mean that this is an input cell. You can freely work here. Move the mouse just below the blue bracket until a blue, horizontal line appears and click on it. Then, you can add a code cell by pressing **Alt + c** (On MacOS: **Ctrl + c**), and add a text cell by pressing **Alt + t** (On MacOS: **Ctrl + t**).\n\nYou can also change the text in this text cell by clicking on it.\n\nBelow we already added one code cell, which says `Admitted.`. Executing that code cell (**Alt + ↓**), will also make the proof progress turn to `Done.` **However,** in that case it is not proven but assumed as an axiom. We do this so you can continue executing the notebook even if you cannot solve the exercise.\n\nAfter you have found a proof, replace the `Admitted.` by `Qed.` (click on the code cell and change the sentence)."
    },
    {
      "type": "code",
      "text": "\nAdmitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-1"
    },
    {
      "type": "text",
      "text": "## Taking arbitrary values to show *for-all* statements\n\nLet us consider the following lemma."
    },
    {
      "type": "code",
      "text": "Lemma every_x_equal_to_itself :\n  for all x : ℝ,\n    x = x."
    },
    {
      "type": "text",
      "text": "> **NOTE:** the notation $x : ℝ$ means $x$ is in $\\mathbb{R}$ (or more accurately, $x$ is of type $\\mathbb{R}$) may be unfamiliar to you, and you may be more familiar with the notation $x ∈ \\reals$. This difference is due to the fact that Waterproof is built on **type theory** and not on set theory. \n\n**HINT:** You can insert characters such as ℝ either from the symbol menu that opens when clicking on 'Σ' in the top right corner, or you can write '\\reals'. For many other unicode characters you can use a backslash command as well."
    },
    {
      "type": "code",
      "text": "\nProof."
    },
    {
      "type": "text",
      "text": "\nTo show a statement like \"for all $x : \\mathbb{R}$, ...\", you first need to take an arbitrary $x : \\mathbb{R}$. We do this by writing and executing the following sentence, i.e. by applying the following **tactic**."
    },
    {
      "type": "code",
      "text": "\nTake x : ℝ."
    },
    {
      "type": "text",
      "text": "\nAfter taking $x : \\mathbb{R}$, we are back in a situation we are by now familiar with. We finish the proof as before."
    },
    {
      "type": "code",
      "text": "\nWe conclude that (x = x).\nQed."
    },
    {
      "type": "text",
      "text": "## Try it yourself\n\nTry to complete the proof of the following lemma."
    },
    {
      "type": "code",
      "text": "Lemma exercise :\n  for all x : ℝ,\n    x + 3 = 3 + x.\nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-2"
    },
    {
      "type": "text",
      "text": "Write your solution here. After you have found a proof, remember to change the `Admitted.` below to `Qed.`."
    },
    {
      "type": "code",
      "text": "\nAdmitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-2"
    },
    {
      "type": "text",
      "text": "## Choosing values for *there-exists* statements\n\nIf you want to show that *there exists* $y : \\mathbb{R}$ such that $(\\dots)$, you need to **choose** a candidate for $y$, and continue showing $(\\dots)$ with your choice."
    },
    {
      "type": "code",
      "text": "Lemma example_choosing : \n  there exists y : ℝ,\n    y = 3."
    },
    {
      "type": "code",
      "text": "\nProof."
    },
    {
      "type": "text",
      "text": "\nWe first choose $y=3$ by using the tactic `Choose y := ((* value *)).`."
    },
    {
      "type": "code",
      "text": "\nChoose y := (3)."
    },
    {
      "type": "text",
      "text": "\n(In this particular case we could also have written `Choose y := 3`, but in general the brackets are important.)\n\nWe now need to show that (y=3) (see **Proof progress** after executing the previous sentence). We can record this for our own convenience."
    },
    {
      "type": "code",
      "text": "\nWe need to show that (y = 3)."
    },
    {
      "type": "text",
      "text": "\nWe can also use the `We need to show that ` tactic to slightly reformulate the goal."
    },
    {
      "type": "code",
      "text": "\nWe need to show that (3 = 3)."
    },
    {
      "type": "code",
      "text": "\nWe conclude that (3 = 3).\nQed."
    },
    {
      "type": "text",
      "text": "## Try it yourself: choosing values"
    },
    {
      "type": "code",
      "text": "Lemma exercise_choosing :\n  for all x : ℝ,\n    there exists z : ℝ,\n      x < z - 2.\nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-3"
    },
    {
      "type": "text",
      "text": "Write your solution here..."
    },
    {
      "type": "code",
      "text": "\nAdmitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-3"
    },
    {
      "type": "text",
      "text": "## Making assumptions\n\nThe following lemma expresses that for all $a : \\mathbb{R}$, if $a < 0$ then ($-a > 0$)."
    },
    {
      "type": "code",
      "text": "\nLemma example_assumptions :\n  ∀ a : ℝ, a < 0 ⇒ - a > 0."
    },
    {
      "type": "text",
      "text": "Before we prove the lemma, let us first add some brackets that indicate how to read such an expression:\n\n$∀ a : ℝ, \\Big( (a < 0) ⇒ (- a > 0)\\Big).$"
    },
    {
      "type": "text",
      "text": "In particular, after the comma after a for-all quantifier, after the comma after a there-exists statement, and after an implication arrow, there are implicit brackets around everything that follows after. \n\nLet us now start to prove the lemma."
    },
    {
      "type": "code",
      "text": "\nProof."
    },
    {
      "type": "text",
      "text": "\nBecause we need to show a for-all statement, we know how to start the proof."
    },
    {
      "type": "code",
      "text": "\nTake a : ℝ."
    },
    {
      "type": "text",
      "text": "\nIf you now execute the code up to previous sentence, you can see in the **Proof progress** that we need to show `a < 0 ⇒ -a > 0.` Remembering the rules for brackets, this means:"
    },
    {
      "type": "code",
      "text": "We need to show that \n  ((a < 0) ⇒ (-a > 0))."
    },
    {
      "type": "text",
      "text": "\nIn words, if $a < 0$ then ($- a > 0$). To show this we need to assume that $a < 0$, and then continue proving that $(-a > 0)$. We can make such an assumption with the following sentence."
    },
    {
      "type": "code",
      "text": "\nAssume a_lt_0 : (a < 0)."
    },
    {
      "type": "text",
      "text": "\nThe **name** of this assumption is in this case **a_lt_0**. What you are actually assuming is written after the colon, namely **a < 0**. Note how after executing the sentence, the assumption $a < 0$ is added under **Proof progress** with the name **a_lt_0**.\n\nWe finish the proof."
    },
    {
      "type": "code",
      "text": "We need to show that (-a > 0).\nWe conclude that (-a > 0).\nQed."
    },
    {
      "type": "text",
      "text": "## Try it yourself\n\nYou can practice making assumptions by proving the lemma below. We have added brackets in the statement to help in reading it, but we didn't have to: the lemma would have exactly the same meaning if we would have left out the brackets."
    },
    {
      "type": "code",
      "text": "Lemma exercise_assumptions :\n  ∀ a : ℝ, (∀ b : ℝ, ( a > 0 ⇒ (b > 0 ⇒ a + b > 0))).\n  \nProof."
    },
    {
      "type": "input",
      "start": true,
      "id": "input-6"
    },
    {
      "type": "text",
      "text": "Write your solution here..."
    },
    {
      "type": "code",
      "text": "\nAdmitted."
    },
    {
      "type": "input",
      "start": false,
      "id": "input-6"
    }
  ]
}