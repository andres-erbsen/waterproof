[
    {
        "name": "Help.",
        "description": "Tries to give you a hint on what to do next.",
        "example": "Lemma x_is_x : forall x : ℝ, x = x.\nProof.\nHelp."
    },
    {
        "name": "We conclude that ((*current goal*)).",
        "description": "Tries to automatically prove the current goal.",
        "example": "Lemma 2_is_2 : 2 = 2. \nProof.\nWe conclude that (2 = 2).\nQed."
    },
    {
        "name": "Take (*name*) : ((*set*)).",
        "description": "Take an arbitrary element from (*set*) and call it (*name*).",
        "example": "Lemma x_is_x : forall x : ℝ, x = x.\nProof.\nTake x : ℝ.\nWe conclude that (x=x).\nQed."
    },
    {
        "name": "Choose (*name_var*) := ((*expression*)).",
        "description": "You can use this tactic when you need to show that there exists an x such that a certain property holds. You do this by proposing (*expression*) as a choice for x, giving it the name (*name_var*).",
        "example": "Lemma exist_0 : ∃ x : ℝ, x = 0.\nProof.\nChoose y:=(0).\nThis follows immediately.\nQed."
    },
    {
        "name": "Assume that ((*statement*)) ((*optional_label*)).",
        "description": "If you need to prove (*statement*) ⇒ B, this allows you to assume that (*statement*) holds, giving it the label (*optional_label*). You can leave out ((*optional_label*)) if you don't wish to name your assumption.",
        "example": "Lemma A_impl_A : forall A : Prop, A ⇒ A.\nProof.\nTake A : Prop.\nAssume that (A) (H_A).\nApply H_A.Qed."
    },
    {
        "name": "(& 3 < 5 = 2 + 3 ≤ 7 )",
        "description": "Example of a chain of (in)equalities in which every inequality should.",
        "example": "We conclude that (& a < b < c)."
    },
    {
        "name": "Obtain (*name_var*) according to ((*name_hyp*)), so for (*name_var*) : (*type_of_var*) it holds that ((*statement*)) ((*optional_label*)).",
        "description": "In case a hypothesis (*name_hyp*) starts with 'there exists (*name_var_2*) : (*type_of_var*), ((*statement*))', then you can use this tactic to select such a variable (*name_var*) of type (*type_var*) satisfying ((*statement*)), giving this property the name (*optional_label*). You can leave out ((*optional_label*)) if you don't wish to name the property.",
        "example": "Obtain y according to (i), so for y : ℝ it holds that (10 < y ∧ y < x) (my_prop)."
    },
    {
        "name": "It holds that ((*statement*)) ((*optional_label*)).",
        "description": "Tries to automatically prove (*statement*). If that works, (*statement*) is added as a hypothesis with name (*optional_label*).",
        "example": "It holds that (3=3) (three_equals_itself)."
    },
    {
        "name": "By ((*lemma or assumption*)) it holds that ((*statement*)) ((*optional_label*)).",
        "description": "Tries to prove (*statement*) using (*lemma*) or (*assumption*). If that works, (*statement*) is added as a hypothesis with name (*optional_label*). You can leave out ((*optional_label*)) if you don't wish to name the statement.",
        "example": "Lemma two_is_2 : 0 + 2 = 2. \nProof.\nBy (plus_O_n 2) it holds that (0 + 2 = 2) (H2). \nApply H2. \nQed."
    },
    {
        "name": "We claim that ((*statement*)) ((*optional_label*)).",
        "description": "Lets you first show (*statement*) before continuing with the rest of the proof. After you showed (*statement*), it will be available as a hypothesis with name (*optional_name*).",
        "example": "We claim that (2 = 2) (two_is_two)."
    },
    {
        "name": "It suffices to show that ((*statement*)).",
        "description": "Waterproof tries to verify automatically whether it is indeed enough to show (*statement*) to prove the current goal. If so, (*statement*) becomes the new goal.",
        "advanced": false
    },
    {
        "name": "We argue by contradiction.",
        "description": "Assumes the opposite of what you need to show. Afterwards, you need to make substeps that show that both A and ¬ A (i.e. not A) for some statement A. Finally, you can finish your proof with 'Contradiction.'",
        "example": "We argue by contradiction."
    },
    {
        "name": "Contradiction",
        "description": "If you have shown both A and not A for some statement A, you can write \"Contradiction\" to finish the proof of the current goal.",
        "example": "Contradiction."
    },
    {
        "name": "Because (*name_combined_hyp*) both (*name_hyp_1*) and (*name_hyp_2*).",
        "description": "If you currently have a hypothesis with name (*name_combined_hyp*) which is in fact of the form H1 ∧ H2, then this tactic splits it up in two separate hypotheses with names (*name_hyp_1*) and (*name_hyp_2*).",
        "example": "Lemma and_example : for all A B : Prop, A ∧ B ⇒ A.\nTake A : Prop. Take B : Prop.\nAssume A_and_B : A .",
        "advanced": true
    },
    {
        "name": "Apply (*lemma or assumption*).",
        "description": "Apply a lemma or an assumption.",
        "example": "Lemma a: forall A B: Prop, (A -> B) -> A -> B.\nProof.\n  Assume that (A -> B) (H). Assume that (A) (H0).\n  Apply H.\n  Apply H0.\nQed.",
        "advanced": true
    },
    {
        "name": "Write goal using ((*equality*)) as ((*new goal*)).",
        "description": "First attempts to automatically find a proof of the provided equality, and if it succeeds it uses it to replace in the goal the lhs of the equality by the rhs.",
        "example": "Write goal using (2 + 3 = 5) as (5 = 5).",
        "advanced": true
    },
    {
        "name": "Write (*name_hyp*) as ((*expression*)).",
        "description": "Checks that the hypothesis with name (*name_hyp*) can be converted to (*expression*), and then replaces it by (*expression*). This is in general a more readable alternative to \"Expand the definition\"",
        "example": "Write x_in_A as (x ∈ A).",
        "advanced": true
    },
    {
        "name": "Write (*name_hyp*) using ((*equality*)) as ((*new_hyp*)).",
        "description": "First attempts to automatically find a proof of the provided equality, and if it succeeds it uses it to replace in the hypothesis with name (*name_hyp*) the lhs of the equality by the rhs.",
        "example": "Rewrite H0 using (2 + 3 = 5) as (5 = 5).",
        "advanced": true
    },
    {
        "name": "Either ((*case_1*)) or ((*case_2*)).",
        "description": "Case distinction when always precisely one of (*case_1*) or (*case_2*) occurs."
    },
    {
        "name": "Expand the definition of (*name_kw*).",
        "description": "Expands the definition of the keyword (*name_kw*) in the current goal.",
        "example": "Expand the definition of is_upper_bound.",
        "advanced": false
    },
    {
        "name": "Expand the definition of (*name_kw*) in (*name_hyp*).",
        "description": "Expands the definition of the keyword (*name_kw*) in hypothesis (*name_hyp*).",
        "example": "Expand the definition of is_upper_bound in H0.",
        "advanced": false
    },
    {
        "name": "We show both statements.",
        "description": "Splits the goal in two separate goals, if it is of the form A ∧ B",
        "example": "Lemma ex_split : forall A B: Prop, A ⇒ (B ⇒ A ∧ B).\nProof.\n Take A : Prop. Take B : Prop.\nAssume H_A. Assume H_B.\nWe show both statements.\nApply H_A. Apply H_B. Qed."
    },
    {
        "name": "We show both directions.",
        "description": "Splits a goal of the form A ⇔ B, into the goals (A ⇒ B) and (B ⇒ A)",
        "example": ""
    },
    {
        "name": "We need to show that ((*(alternative) formulation of current goal*)).",
        "description": "Generally makes a proof more readable. Has the additional functionality that you can write a slightly different but equivalent formulation of the goal: you can for instance change names of certain variables.",
        "example": "Lemma example_reflexivity : 0 = 0.\nProof.\nWe need to show that (0=0)."
    },
    {
        "name": "We prove by induction on (*name_1*), calling the induction hypothesis (*name_2*).",
        "description": "Prove a statement by induction on the variable with (*name_1*), calling the induction hypothesis (*name_2*)."
    },
    {
        "name": "By ((*lemma or assumption*)) it holds that ((*statement*)).",
        "description": "Tries to directly prove the goal using (*lemma or assumption*) when the goal corresponds to (*statement*).",
        "advanced": true
    },
    {
        "name": "Define (*name*) := ((*expression*)).",
        "description": "Temporarily give the name (*name*) to the expression (*expression*)",
        "advanced": true
    }
]
